{"ast":null,"code":"// Firebase Authentication Configuration\n// This handles ONLY authentication (Google OAuth + Email/Password)\n// All data operations use Base44 API\nimport{initializeApp}from'firebase/app';import{getAuth,signInWithEmailAndPassword,createUserWithEmailAndPassword,signInWithPopup,GoogleAuthProvider,sendPasswordResetEmail,signOut as firebaseSignOut,onAuthStateChanged}from'firebase/auth';// Firebase configuration\nconst firebaseConfig={apiKey:\"AIzaSyDGRLpWL0uhCP2McjerNu7PR0bxRanIto4\",authDomain:\"biggrade-75a91.firebaseapp.com\",projectId:\"biggrade-75a91\",storageBucket:\"biggrade-75a91.firebasestorage.app\",messagingSenderId:\"134616128547\",appId:\"1:134616128547:web:735490d746f411b33a2596\",measurementId:\"G-B7BC52DN8V\"};// Initialize Firebase\nconst app=initializeApp(firebaseConfig);const auth=getAuth(app);const googleProvider=new GoogleAuthProvider();// Admin email\nconst ADMIN_EMAIL='arcanimater@gmail.com';// Firebase Auth wrapper\nexport const firebaseAuth={// Get current Firebase user\ngetCurrentUser(){return auth.currentUser;},// Check if user is admin\nisAdmin(email){return email===ADMIN_EMAIL;},// Sign in with email and password\nasync signInWithEmail(email,password){try{const userCredential=await signInWithEmailAndPassword(auth,email,password);return userCredential.user;}catch(error){console.error('Email sign in error:',error);throw error;}},// Sign up with email and password\nasync signUpWithEmail(email,password){try{const userCredential=await createUserWithEmailAndPassword(auth,email,password);return userCredential.user;}catch(error){console.error('Email sign up error:',error);throw error;}},// Sign in with Google\nasync signInWithGoogle(){try{const result=await signInWithPopup(auth,googleProvider);return result.user;}catch(error){console.error('Google sign in error:',error);throw error;}},// Send password reset email\nasync sendPasswordReset(email){try{await sendPasswordResetEmail(auth,email);return true;}catch(error){console.error('Password reset error:',error);throw error;}},// Sign out\nasync signOut(){try{await firebaseSignOut(auth);return true;}catch(error){console.error('Sign out error:',error);throw error;}},// Listen to auth state changes\nonAuthStateChanged(callback){return onAuthStateChanged(auth,callback);}};export{auth};export default firebaseAuth;","map":{"version":3,"names":["initializeApp","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signInWithPopup","GoogleAuthProvider","sendPasswordResetEmail","signOut","firebaseSignOut","onAuthStateChanged","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","googleProvider","ADMIN_EMAIL","firebaseAuth","getCurrentUser","currentUser","isAdmin","email","signInWithEmail","password","userCredential","user","error","console","signUpWithEmail","signInWithGoogle","result","sendPasswordReset","callback"],"sources":["/home/ubuntu/BigGrade-Main-files/src/firebaseAuth.js"],"sourcesContent":["// Firebase Authentication Configuration\n// This handles ONLY authentication (Google OAuth + Email/Password)\n// All data operations use Base44 API\n\nimport { initializeApp } from 'firebase/app';\nimport { \n  getAuth, \n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signInWithPopup,\n  GoogleAuthProvider,\n  sendPasswordResetEmail,\n  signOut as firebaseSignOut,\n  onAuthStateChanged\n} from 'firebase/auth';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDGRLpWL0uhCP2McjerNu7PR0bxRanIto4\",\n  authDomain: \"biggrade-75a91.firebaseapp.com\",\n  projectId: \"biggrade-75a91\",\n  storageBucket: \"biggrade-75a91.firebasestorage.app\",\n  messagingSenderId: \"134616128547\",\n  appId: \"1:134616128547:web:735490d746f411b33a2596\",\n  measurementId: \"G-B7BC52DN8V\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Admin email\nconst ADMIN_EMAIL = 'arcanimater@gmail.com';\n\n// Firebase Auth wrapper\nexport const firebaseAuth = {\n  // Get current Firebase user\n  getCurrentUser() {\n    return auth.currentUser;\n  },\n\n  // Check if user is admin\n  isAdmin(email) {\n    return email === ADMIN_EMAIL;\n  },\n\n  // Sign in with email and password\n  async signInWithEmail(email, password) {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error('Email sign in error:', error);\n      throw error;\n    }\n  },\n\n  // Sign up with email and password\n  async signUpWithEmail(email, password) {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error('Email sign up error:', error);\n      throw error;\n    }\n  },\n\n  // Sign in with Google\n  async signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      return result.user;\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      throw error;\n    }\n  },\n\n  // Send password reset email\n  async sendPasswordReset(email) {\n    try {\n      await sendPasswordResetEmail(auth, email);\n      return true;\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n\n  // Sign out\n  async signOut() {\n    try {\n      await firebaseSignOut(auth);\n      return true;\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    }\n  },\n\n  // Listen to auth state changes\n  onAuthStateChanged(callback) {\n    return onAuthStateChanged(auth, callback);\n  }\n};\n\nexport { auth };\nexport default firebaseAuth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}