{"ast":null,"code":"// Authentication Manager\n// Combines Firebase Authentication with Base44 User Data\nimport{firebaseAuth}from'./firebaseAuth';import{base44}from'./base44Client';const ADMIN_EMAIL='arcanimater@gmail.com';class AuthManager{constructor(){this.currentUser=null;this.userProfile=null;this.listeners=[];}// Initialize and listen to Firebase auth changes\ninitialize(){return firebaseAuth.onAuthStateChanged(async firebaseUser=>{if(firebaseUser){// User is signed in with Firebase\nawait this.loadUserProfile(firebaseUser);}else{// User is signed out\nthis.currentUser=null;this.userProfile=null;}// Notify all listeners\nthis.notifyListeners();});}// Load user profile from Base44\nasync loadUserProfile(firebaseUser){try{// Check if user exists in PublicUserDirectory\nconst users=await base44.PublicUserDirectory.filter({user_email:firebaseUser.email});let userProfile=users.length>0?users[0]:null;// Check if this is admin\nconst isAdmin=firebaseAuth.isAdmin(firebaseUser.email);this.currentUser=firebaseUser;this.userProfile=userProfile;// Store combined user data\nconst userData={uid:firebaseUser.uid,email:firebaseUser.email,displayName:firebaseUser.displayName||(userProfile===null||userProfile===void 0?void 0:userProfile.full_name)||firebaseUser.email.split('@')[0],photoURL:firebaseUser.photoURL||(userProfile===null||userProfile===void 0?void 0:userProfile.avatar_url)||null,userType:(userProfile===null||userProfile===void 0?void 0:userProfile.user_type)||null,isAdmin:isAdmin,base44Profile:userProfile};localStorage.setItem('biggrade_user',JSON.stringify(userData));return userData;}catch(error){console.error('Error loading user profile:',error);return null;}}// Get current user data\ngetCurrentUser(){const stored=localStorage.getItem('biggrade_user');if(stored){try{return JSON.parse(stored);}catch(e){localStorage.removeItem('biggrade_user');}}return null;}// Sign up with email and password\nasync signUp(email,password,displayName){try{const firebaseUser=await firebaseAuth.signUpWithEmail(email,password);// Return user without profile - they need to select account type first\nreturn{uid:firebaseUser.uid,email:firebaseUser.email,displayName:displayName||firebaseUser.email.split('@')[0],photoURL:null,userType:null,isAdmin:firebaseAuth.isAdmin(email),needsAccountType:true};}catch(error){console.error('Sign up error:',error);throw error;}}// Complete signup by setting account type\nasync completeSignup(userType){const firebaseUser=firebaseAuth.getCurrentUser();if(!firebaseUser){throw new Error('No authenticated user');}try{// Create user profile in Base44\nconst userProfile=await base44.PublicUserDirectory.create({user_email:firebaseUser.email,user_id:firebaseUser.uid,full_name:firebaseUser.displayName||firebaseUser.email.split('@')[0],user_type:userType,// 'student' or 'tutor'\navatar_url:firebaseUser.photoURL||null,last_active:new Date().toISOString(),tutor_rating:0,student_rating:0,peer_points:0,is_qualified_teacher:false,role:firebaseAuth.isAdmin(firebaseUser.email)?'admin':'user'});// Reload user profile\nreturn await this.loadUserProfile(firebaseUser);}catch(error){console.error('Complete signup error:',error);throw error;}}// Sign in with email and password\nasync signInWithEmail(email,password){try{const firebaseUser=await firebaseAuth.signInWithEmail(email,password);return await this.loadUserProfile(firebaseUser);}catch(error){console.error('Sign in error:',error);throw error;}}// Sign in with Google\nasync signInWithGoogle(){try{const firebaseUser=await firebaseAuth.signInWithGoogle();// Check if user already has a profile\nconst users=await base44.PublicUserDirectory.filter({user_email:firebaseUser.email});if(users.length===0){// New Google user - needs to select account type\nreturn{uid:firebaseUser.uid,email:firebaseUser.email,displayName:firebaseUser.displayName||firebaseUser.email.split('@')[0],photoURL:firebaseUser.photoURL,userType:null,isAdmin:firebaseAuth.isAdmin(firebaseUser.email),needsAccountType:true};}// Existing user - load profile\nreturn await this.loadUserProfile(firebaseUser);}catch(error){console.error('Google sign in error:',error);throw error;}}// Send password reset email\nasync sendPasswordReset(email){try{await firebaseAuth.sendPasswordReset(email);return true;}catch(error){console.error('Password reset error:',error);throw error;}}// Sign out\nasync signOut(){try{await firebaseAuth.signOut();localStorage.removeItem('biggrade_user');this.currentUser=null;this.userProfile=null;this.notifyListeners();return true;}catch(error){console.error('Sign out error:',error);throw error;}}// Add listener for auth state changes\naddListener(callback){this.listeners.push(callback);}// Remove listener\nremoveListener(callback){this.listeners=this.listeners.filter(l=>l!==callback);}// Notify all listeners\nnotifyListeners(){const user=this.getCurrentUser();this.listeners.forEach(callback=>callback(user));}}// Create singleton instance\nconst authManager=new AuthManager();export default authManager;export{authManager,ADMIN_EMAIL};","map":{"version":3,"names":["firebaseAuth","base44","ADMIN_EMAIL","AuthManager","constructor","currentUser","userProfile","listeners","initialize","onAuthStateChanged","firebaseUser","loadUserProfile","notifyListeners","users","PublicUserDirectory","filter","user_email","email","length","isAdmin","userData","uid","displayName","full_name","split","photoURL","avatar_url","userType","user_type","base44Profile","localStorage","setItem","JSON","stringify","error","console","getCurrentUser","stored","getItem","parse","e","removeItem","signUp","password","signUpWithEmail","needsAccountType","completeSignup","Error","create","user_id","last_active","Date","toISOString","tutor_rating","student_rating","peer_points","is_qualified_teacher","role","signInWithEmail","signInWithGoogle","sendPasswordReset","signOut","addListener","callback","push","removeListener","l","user","forEach","authManager"],"sources":["/home/ubuntu/BigGrade-Main-files/src/authManager.js"],"sourcesContent":["// Authentication Manager\n// Combines Firebase Authentication with Base44 User Data\n\nimport { firebaseAuth } from './firebaseAuth';\nimport { base44 } from './base44Client';\n\nconst ADMIN_EMAIL = 'arcanimater@gmail.com';\n\nclass AuthManager {\n  constructor() {\n    this.currentUser = null;\n    this.userProfile = null;\n    this.listeners = [];\n  }\n\n  // Initialize and listen to Firebase auth changes\n  initialize() {\n    return firebaseAuth.onAuthStateChanged(async (firebaseUser) => {\n      if (firebaseUser) {\n        // User is signed in with Firebase\n        await this.loadUserProfile(firebaseUser);\n      } else {\n        // User is signed out\n        this.currentUser = null;\n        this.userProfile = null;\n      }\n      \n      // Notify all listeners\n      this.notifyListeners();\n    });\n  }\n\n  // Load user profile from Base44\n  async loadUserProfile(firebaseUser) {\n    try {\n      // Check if user exists in PublicUserDirectory\n      const users = await base44.PublicUserDirectory.filter({ \n        user_email: firebaseUser.email \n      });\n      \n      let userProfile = users.length > 0 ? users[0] : null;\n      \n      // Check if this is admin\n      const isAdmin = firebaseAuth.isAdmin(firebaseUser.email);\n      \n      this.currentUser = firebaseUser;\n      this.userProfile = userProfile;\n      \n      // Store combined user data\n      const userData = {\n        uid: firebaseUser.uid,\n        email: firebaseUser.email,\n        displayName: firebaseUser.displayName || userProfile?.full_name || firebaseUser.email.split('@')[0],\n        photoURL: firebaseUser.photoURL || userProfile?.avatar_url || null,\n        userType: userProfile?.user_type || null,\n        isAdmin: isAdmin,\n        base44Profile: userProfile\n      };\n      \n      localStorage.setItem('biggrade_user', JSON.stringify(userData));\n      \n      return userData;\n    } catch (error) {\n      console.error('Error loading user profile:', error);\n      return null;\n    }\n  }\n\n  // Get current user data\n  getCurrentUser() {\n    const stored = localStorage.getItem('biggrade_user');\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        localStorage.removeItem('biggrade_user');\n      }\n    }\n    return null;\n  }\n\n  // Sign up with email and password\n  async signUp(email, password, displayName) {\n    try {\n      const firebaseUser = await firebaseAuth.signUpWithEmail(email, password);\n      \n      // Return user without profile - they need to select account type first\n      return {\n        uid: firebaseUser.uid,\n        email: firebaseUser.email,\n        displayName: displayName || firebaseUser.email.split('@')[0],\n        photoURL: null,\n        userType: null,\n        isAdmin: firebaseAuth.isAdmin(email),\n        needsAccountType: true\n      };\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw error;\n    }\n  }\n\n  // Complete signup by setting account type\n  async completeSignup(userType) {\n    const firebaseUser = firebaseAuth.getCurrentUser();\n    if (!firebaseUser) {\n      throw new Error('No authenticated user');\n    }\n\n    try {\n      // Create user profile in Base44\n      const userProfile = await base44.PublicUserDirectory.create({\n        user_email: firebaseUser.email,\n        user_id: firebaseUser.uid,\n        full_name: firebaseUser.displayName || firebaseUser.email.split('@')[0],\n        user_type: userType, // 'student' or 'tutor'\n        avatar_url: firebaseUser.photoURL || null,\n        last_active: new Date().toISOString(),\n        tutor_rating: 0,\n        student_rating: 0,\n        peer_points: 0,\n        is_qualified_teacher: false,\n        role: firebaseAuth.isAdmin(firebaseUser.email) ? 'admin' : 'user'\n      });\n\n      // Reload user profile\n      return await this.loadUserProfile(firebaseUser);\n    } catch (error) {\n      console.error('Complete signup error:', error);\n      throw error;\n    }\n  }\n\n  // Sign in with email and password\n  async signInWithEmail(email, password) {\n    try {\n      const firebaseUser = await firebaseAuth.signInWithEmail(email, password);\n      return await this.loadUserProfile(firebaseUser);\n    } catch (error) {\n      console.error('Sign in error:', error);\n      throw error;\n    }\n  }\n\n  // Sign in with Google\n  async signInWithGoogle() {\n    try {\n      const firebaseUser = await firebaseAuth.signInWithGoogle();\n      \n      // Check if user already has a profile\n      const users = await base44.PublicUserDirectory.filter({ \n        user_email: firebaseUser.email \n      });\n      \n      if (users.length === 0) {\n        // New Google user - needs to select account type\n        return {\n          uid: firebaseUser.uid,\n          email: firebaseUser.email,\n          displayName: firebaseUser.displayName || firebaseUser.email.split('@')[0],\n          photoURL: firebaseUser.photoURL,\n          userType: null,\n          isAdmin: firebaseAuth.isAdmin(firebaseUser.email),\n          needsAccountType: true\n        };\n      }\n      \n      // Existing user - load profile\n      return await this.loadUserProfile(firebaseUser);\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      throw error;\n    }\n  }\n\n  // Send password reset email\n  async sendPasswordReset(email) {\n    try {\n      await firebaseAuth.sendPasswordReset(email);\n      return true;\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  }\n\n  // Sign out\n  async signOut() {\n    try {\n      await firebaseAuth.signOut();\n      localStorage.removeItem('biggrade_user');\n      this.currentUser = null;\n      this.userProfile = null;\n      this.notifyListeners();\n      return true;\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    }\n  }\n\n  // Add listener for auth state changes\n  addListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  // Remove listener\n  removeListener(callback) {\n    this.listeners = this.listeners.filter(l => l !== callback);\n  }\n\n  // Notify all listeners\n  notifyListeners() {\n    const user = this.getCurrentUser();\n    this.listeners.forEach(callback => callback(user));\n  }\n}\n\n// Create singleton instance\nconst authManager = new AuthManager();\n\nexport default authManager;\nexport { authManager, ADMIN_EMAIL };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}